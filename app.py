import sqlite3  # Biblioteca para interagir com o banco de dados SQLite
from flask import Flask, request, jsonify  # Importamos Flask para criar a API e request/jsonify para manipular requisi√ß√µes e respostas

# Criamos a aplica√ß√£o Flask
# O Flask precisa saber qual √© o arquivo principal do programa, ent√£o passamos "__name__" como refer√™ncia
app = Flask(__name__)


@app.route("/")
def mensagem_inicial():
    # Quando o usu√°rio acessar essa rota no navegador, ele ver√° essa mensagem HTML na tela
    # Essa mensagem ser√° exibida como um cabe√ßalho de segundo n√≠vel (<h2>)
    return "<h2>Seja Bem Vindo!</h2>"

# Fun√ß√£o para inicializar o banco de dados SQLite
# Ela cria o banco de dados caso ele ainda n√£o exista e garante que a estrutura esteja configurada corretamente

def init_db():
    # Abrimos uma conex√£o com o banco de dados "database.db"
    # O comando "with" garante que a conex√£o ser√° fechada automaticamente ap√≥s a execu√ß√£o
    with sqlite3.connect("database.db") as conn:
        # Criamos uma tabela chamada "LIVROS", caso ela ainda n√£o exista
        conn.execute(
            """
                CREATE TABLE IF NOT EXISTS LIVROS(
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    titulo TEXT NOT NULL, 
                    categoria TEXT NOT NULL,  
                    autor TEXT NOT NULL, 
                    image_url TEXT NOT NULL 
                )
            """
        )  # Esse comando SQL cria a tabela "LIVROS" caso ela ainda n√£o exista, garantindo que nossa aplica√ß√£o funcione corretamente

# Chamamos a fun√ß√£o para garantir que o banco de dados esteja pronto antes de rodar a aplica√ß√£o
init_db()

# üîπ Criamos a rota "/doar" para permitir que um novo livro seja cadastrado via m√©todo POST
@app.route("/doar", methods=["POST"])
def doar():
    # Pegamos os dados enviados pelo cliente no formato JSON e exibimos no terminal para fins de teste
    dados = request.get_json()
    print(f" AQUI EST√ÉO OS DADOS RETORNADOS DO CLIENTE {dados}")

    # Extra√≠mos cada campo do JSON enviado
    titulo = dados.get("titulo")
    categoria = dados.get("categoria")
    autor = dados.get("autor")
    image_url = dados.get("image_url")

    # Verificamos se algum dos campos obrigat√≥rios est√° vazio
    if not titulo or not categoria or not autor or not image_url:
        # Se faltar algum dado, retornamos um erro 400 com uma mensagem explicando o problema
        return jsonify({"erro": "Todos os campos s√£o obrigat√≥rios"}), 400

    # Conectamos ao banco de dados usando a vari√°vel conn
    with sqlite3.connect("database.db") as conn:
        # Executamos um comando SQL para inserir os dados na tabela LIVROS
        conn.execute(f"""
                    INSERT INTO LIVROS (titulo,categoria,autor,image_url)
                    VALUES ("{titulo}", "{categoria}", "{autor}", "{image_url}")
        """)

        # Salvamos as mudan√ßas com commit()
        conn.commit()

        # Retornamos uma mensagem confirmando o cadastro com status 201 (Created)
        return jsonify({"mensagem": "Livro cadastrado com sucesso"}), 201

# üîπ Criamos a rota "/livros" para listar todos os livros cadastrados no banco
@app.route("/livros", methods=["GET"])
def listar_livros():
    # Conectamos ao banco de dados
    with sqlite3.connect("database.db") as conn:
        # Buscamos todos os registros da tabela LIVROS
        livros = conn.execute("SELECT * FROM LIVROS").fetchall()

        # Criamos uma lista vazia para armazenar os livros formatados
        livros_formatados = []

        # Para cada livro encontrado, transformamos os dados em um dicion√°rio
        for item in livros:
            dicionario_livros = {
                "id": item[0],            # ID do livro
                "titulo": item[1],        # T√≠tulo
                "categoria": item[2],     # Categoria
                "autor": item[3],         # Autor
                "image_url": item[4]      # URL da imagem
            }
            # Adicionamos o dicion√°rio √† lista
            livros_formatados.append(dicionario_livros)

    # Retornamos todos os livros em formato JSON com status 200 (OK)
    return jsonify(livros_formatados)

# üîπ Verificamos se este arquivo est√° sendo executado diretamente
# Isso evita que o servidor Flask rode se o arquivo for apenas importado
if __name__ == "__main__":
    # Iniciamos o servidor Flask em modo debug
    # O modo debug mostra erros detalhados e recarrega o servidor automaticamente ao salvar o arquivo
    app.run(debug=True)